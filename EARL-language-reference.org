#+TITLE: EARL Lanugage Reference
#+DESCRIPTION: The "ins" and "outs" of EARL
#+AUTHOR: Zachary Haskins (malloc-nbytes)
#+EMAIL: zdhdev@yahoo.com
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil

*NOTE*:

1. =This text format represents keywords=
2. /This test format represents a type of grammar/
3. <text> represents an identifier
4. | represents OR
5. [text] means list
6. *(text) either 0 or more
7. ?(text) means 0 or 1
8. "text" represents a string

* Your First Program

To jump right into testing out EARL, do the following to implement a /Hello World!/ program.

Create a new file called =hello.earl=

#+begin_example
print("Hello World!");
#+end_example

Then run

#+begin_src bash
  earl ./hello.earl
#+end_src

Output:

#+begin_example
Hello World!
#+end_example

* Variable Declarations
=let= <id> = /expr/;

* Mutation
<id> | /expr/ = /expr/;

* Conditionals
=if= /expr/ *{* [stmt] *}*

=else if= /expr/ *{* [stmt] *}*

=else= *{* [stmt] *}*

* Pattern Matching

#+begin_quote
Pattern matching allows you to match on some pattern. This is
the case for all primitives =int=, =str=, =list= etc.

A =match= consists of a two things.
1. The pattern \rightarrow this comes right after the =match= keyword
2. Branches \rightarrow these are all the different patterns can be

Each branch can either specify one pattern or multiple patterns with the =|= (or) operator.
The =when= keyword acts as a /guard/ for the branch. If the pattern matches, only then is the
/guard/ evaluated. If the /guard/ is true, only then will the branch activate.

And finally, the base case consists of the pattern =_=. If none of the other branches *above* this
one happens, this one is guaranteed to happen (unless there is a guard).
#+end_quote

Grammar TODO

** Examples

#+begin_example
let x = 4;
let msg = "foo";

match x {
    1 -> { print("x is 1"); }
    2 | 3 -> { print("x is two or three"); }
    [1,2,3] when type(x) == "list" -> { print(x is a list and is [1,2,3]") };
    4 when msg = "bar" -> { print("x is 4 with msg = bar"); }
    4 when msg = "foo" -> { print("x is 4 with msg = foo"); }
    _ when msg = "hello" -> { print("base case, 4 is something else and msg = hello"); }
    _ -> { print("base case, 4 is something else"); }
}
#+end_example

Output:

#+begin_example
x is 4 with msg = foo
#+end_example

#+begin_example
let x = some(4);

match x {
    none -> {
        print("x is none");
    }
    some(3) -> {
        print("x is some 3");
    }
    some(k) when k % 2 == 1 -> {
        print("x is something and is odd");
    }
    some(k) -> {
        # This branch will execute.
        # `k` is the unwrapped value of `x`.
        print("x is: ", k);
        print(x.unwrap() == k);
    }
    some(_) -> {
        print("x is something");
    }
    _ -> {
        print("x is something else");
    }
}
#+end_example

Output:

#+begin_example
x is: 4
true
#+end_example

* While Loops
=while= /expr/ *{* [stmt] *}*

* For Loops

#+begin_quote
As of now, the =for= loop only enumerates by incrementing
by 1. It takes a start ($s$) and an end ($e$) and will not end until
$s = e$.

\[
\sum_{i = start}^{i < end} i = i + 1
\]

You can modify =i= within the body of the loop.

#+end_quote


=for= <id> =in= /expr/ .. /expr/ *{* [stmt] *}*

* Function Definitions

#+begin_quote
This is how to create a function. The =@world=, =@pub= and =@ref= are attributes. See [[Attributes]] for a description on them.
#+end_quote

** Grammar

*( =@= [ =pub= | =world= ])

=fn= <id> *(* [ * ( =@ref= ) <id> ] *)* *{* [stmt] *}*

** Examples

#+begin_example
@world @pub
fn func1(@ref x, y, @ref z) {
    ...
}

fn func2() {
    ...
}
#+end_example

* Statement Expressions

#+begin_quote
Statement expressions are statements that are only evaluated
for their side effects such as printing, file IO, or in-place mutation
such as =List.rev=.
#+end_quote

** Grammar

<id> *( =(= /expr/ =)= | =[= /expr/ =]= | =.= <ident> ) =;=

** Examples

#+begin_example
print("hello world");
my_list.rev();
#+end_example

* Imports

#+begin_quote
EARL looks for the files relative to the directory
that it was invoked in. During runtime, if an =import=
statement is hit, it will immediately interpret that file.
If there is no processing in the =@world= scope, only the
function definitions and classes are gathered.
#+end_quote

** Grammar

=import= "filepath"

** Examples

#+begin_example
import "std/list.earl"
import "std/math.earl"
import "std/utils.earl"
#+end_example

* Modules

#+begin_quote
/Modules/ allow other files to access resources to the
file that has the module declared in it. If a file does
not have it, the entire file is private. While modules
do allow other files to access resources, only resources
that have the =@pub= attribute.

*It is expected to have the module declaration at the top of the file.
If you do not follow this rule, undefined behavior will occur.*
#+end_quote

** Grammar

=mod= <id>

** Examples

file: =my-math.earl=
#+begin_example
mod MyMath

fn sum(a, b) { return a+b; }
#+end_example

file: =main.earl=
#+begin_example
mod Main

import "my-math.earl"

let s = MyMath.sum(1, 2);
#+end_example

* Attributes

#+begin_quote
Attributes embeds meta information into variables
and functions. You can have none, one, or multiple.

| Name     | Vars          | Funcs | Desc                                        |
|----------+---------------+-------+---------------------------------------------|
| =@pub=   | UNIMPLEMENTED | YES   | Makes the function available to other files |
| =@world= | NO            | YES   | The function closes in the world scope      |
| =@ref=   | YES           | NO    | Declares the var to be a reference          |

*NOTE:* =@ref= can be used as a function parameter and that function will
take a reference to the value passed to it.
#+end_quote

** Grammar

=@= *(pub | world | ref)

** Examples

#+begin_example
@world @pub
fn test_world() {
    # `i` will print since it is in the world scope.
    # The function is also marked as public so other
    # modules can have access to this function.
    print(i)
}

@pub
fn take_ref(@ref ptr) {
    ptr = ptr + 1;
}

let i = 1;
test_world();

@ref let ptr = i;
ptr = ptr + 1;

assert(ptr == 2 && i == 2);

take_ref(i);

assert(i == 3);

#+end_example

* Classes

#+begin_quote
While classes are available, support for inheritance is not yet implemented.

When instantiating a new class, two things will occur.

1. All member variable assignments will happen. If the class has bracket notation =[ ... ]=,
   it will use these.
2. If there is a function called =constructor= in the class, that function will immediately happen.

#+end_quote

** Grammar

=@= *(pub | world | ref)

=class= <id> ?(=[= <arg1>, <arg2>,..., <argN> =]=) ={=

    =@= *(pub | world | ref) <member1> = <id> | /expr/ =;=

    =@= *(pub | world | ref) <member2> = <id> | /expr/ =;=

    <methods>

=}=

** Examples

#+begin_example
# This class takes no arguments for the
# constructors and is also not public,
# so other modules cannot use this class.

class NoPassesArgs {
    x = 1;
    y = 2;

    @pub fn print() {
        The use of `this` keyword is optional
        print(this.x, y);
    }
}
#+end_example

#+begin_example
@pub class Point [x, y, name] {
    x = x;
    y = y;
    name = name;

    # Because this is public, you can access
    # it directly from outside the class.
    @pub desc = "A point class"

    @pub set_x(newx) {
        this.x = newx
    }

    @pub dump() {
        print(this.x);
        print(this.y);
        print(this.name);
        print(this.desc);
    }
}
#+end_example

#+begin_example
@pub class Stack [init] {
    # You could just assign `init` to `lst` here,
    # but for this example, this is done in the constructor.
    lst = [];
    sz = 0;

    # The constructor gets called
    # right after class instantiation.
    fn constructor() {
        for i in 0..len(init) {
            this.push(init[i]);
        }
    }

    @pub fn push(x) {
        this.lst.append(x);
        this.sz = this.sz+1;
    }

    @pub fn pop() {
        this.lst.pop(this.sz-1);
        this.sz = this.sz-1;
    }
}
#+end_example

* Datatypes

#+begin_quote
The following is a list of the currently implemented primitive types.
#+end_quote

** =int=

#+begin_quote
Your basic 32 bit integer datatype.

*Note*: They *do* over/under-flow
#+end_quote

** =bool=

#+begin_quote
The boolean datatype. Can either be =true= or =false=.
#+end_quote

** =char=

#+begin_quote
A single character. They are surrounded by single quotes ='=.
#+end_quote

** =str=

#+begin_quote
A string is a list of =char='s. They are surrounded with double quotes ="=.
#+end_quote

** =list=

#+begin_quote
A list is a growable array. They can hold any datatype, and you
can even mix multiple datatypes in a single list.
#+end_quote

** =option=

#+begin_quote
Because all variables need to be initialized when using a `let` statement,
it may be annoying to be forced to give it some initial value. The =none= type
allows you to set a variable to it and can be reassigned later.

To assign a value to a none-type, you must wrap it in =some= i.e.,

=let x = none;=

=x = some(9);=

The underlying value (in the above example, =9=) can be extracted out
using the =unwrap()= member intrinsic.
#+end_quote

** =closure=

#+begin_quote
Closures are anonymous functions that close in the outer scope. They
can be used as functions or passed around as variables.

#+begin_example
fn take_sum_closure(f, a, b) {
    f(a, b);
}

let msg = "hello world";
let hello = |_| {
    print(msg);
};

let sum = |a, b| {
    print("in sum");
    return a+b;
};

hello();

print(take_sum_closure(sum, 1, 2));
#+end_example

Output:
#+begin_example
hello world
in sum
3
#+end_example

#+end_quote

** =file=

#+begin_quote
The =file= type is a file handler. It handles opening, closing, reading, and writing
to files.

*Note*: It is up to the user to =close()= the file handle.
#+end_quote

** =unit=

#+begin_quote
The =unit= type is used as a "throwaway". It essentially throws
away the value that gets assigned to it. The following are all
examples of correct usage of it:

=let _ = print("hello");=

=let _ = 1;=

=let cl = |_| { print("hello"); };=

=match x { _ -> { print("example"); } }=
#+end_quote

* Intrinsics

#+begin_quote
Intrinsics are functions that are automatically built into the interpreter.
You do not need to import anything to use these functions.
#+end_quote

** =print=

#+begin_quote
#+begin_example
print(arg1: any, arg2: any, ..., argN: any) -> unit
#+end_example

Will print all elements if it can.
#+end_quote

** =println=

#+begin_quote
#+begin_example
println(arg1: any, arg2: any, ..., argN: any) -> unit
#+end_example

Will print all elements if it can. Adds a newline at the end.
#+end_quote

** TODO =input=

#+begin_quote
#+begin_example
input(arg1: any, arg2: any, ..., argN: any) -> str
#+end_example

Will print all elements if it can. Gets input from the user
and returns it as a =str=.
#+end_quote

** =assert=

#+begin_quote
#+begin_example
assert(arg1: any, arg2: any, ..., argN: any) -> unit
#+end_example

Tests each argument for =true=. If any of the conditions fails,
the program immediately crashes.
#+end_quote

** =len=

#+begin_quote
#+begin_example
len(arg: list|str) -> int
#+end_example

Expects either a =list= or =string=. Will give the length
as an integer.
#+end_quote

** =some=

#+begin_quote
#+begin_example
some(arg: any) -> option<any>
#+end_example

Wraps =arg= in an =option= type.
#+end_quote

** TODO =type=

#+begin_quote
#+begin_example
type(arg: any) -> str
#+end_example

Returns the type of =arg= as a =str=.
#+end_quote

** TODO =argv=

#+begin_quote
#+begin_example
argv() -> list
#+end_example

Returns a list of =str= of the supplied command line arguments
that were given by the =--= option.
#+end_quote

** =open=

#+begin_quote
#+begin_example
open(fp: str, mode: str) -> file
#+end_example

Opens the filepath =fp= with mode =mode=. Mode must either be
=r= for read or =w= for write.
#+end_quote

** TODO =unimplemented=

#+begin_quote
#+begin_example
unimplemented(arg1, arg2, ..., argN)
#+end_example

Prints arg1..arg$N$ to =stderr= and exits with non-zero exit code.
#+end_quote

* Member Intrinsics

#+begin_quote
Member intrinsics are the same as intrinsics, except they are
member functions (or methods) that types have built into them.
You access these with the dot `.` notation i.e.,

=let lst = [1,2,3];=

=lst.rev();=
#+end_quote

** =list= Implementes

#+begin_quote
#+begin_example
rev() -> unit
#+end_example

Reverses the list inplace.
#+end_quote

#+begin_quote
#+begin_example
append(arg1: any, arg2: any, ..., argN: any) -> unit
#+end_example

Will append arg1..arg$N$ to the list.
#+end_quote

#+begin_quote
#+begin_example
pop(idx: int) -> unit
#+end_example

Will remove the element at index =idx=.
#+end_quote

#+begin_quote
#+begin_example
filter(cl: closure) -> list
#+end_example

Takes the closure =cl= and creates a new =list= of all the
elements where =cl= returns =true=.
#+end_quote

** =str= Implements

#+begin_quote
#+begin_example
split(delim: str) -> list
#+end_example

Split a string by the delimiter =delim=.
#+end_quote

#+begin_quote
#+begin_example
pop(idx: int) -> unit
#+end_example

Will remove the element at index =idx=.
#+end_quote

** =char= Implements

#+begin_quote
#+begin_example
ascii() -> int
#+end_example

Returns the ascii code of the character.
#+end_quote

** =option= Implements

#+begin_quote
#+begin_example
is_none() -> bool
#+end_example

Returns =true= if the value is =none=, =false= otherwise.
#+end_quote

#+begin_quote
#+begin_example
is_some() -> bool
#+end_example

Returns =true= if the value is =some=, =false= otherwise.
#+end_quote

** =file= Implements

#+begin_quote
#+begin_example
close() -> unit
#+end_example

Closes an opened file.
#+end_quote

#+begin_quote
#+begin_example
read() -> str
#+end_example

Get the contents of a file as a =str=.
#+end_quote

#+begin_quote
#+begin_example
dump() -> unit
#+end_example

Print the contents of a file.
#+end_quote

#+begin_quote
#+begin_example
write(msg: str|char|int) -> unit
#+end_example

Writes =msg= to the opened file.
#+end_quote

#+begin_quote
#+begin_example
writelines(msg: list) -> unit
#+end_example

Writes all elements in the list =msg= to the opened file.
At the end of each value, a newline is added.
#+end_quote

* StdLib

#+begin_quote
Upon installing EARL, the standard library is installed into
=/usr/local/include/EARL/std=. The first place that EARL looks
when evaluating an =import= statement is =/usr/local/include/EARL/=.
This means that all you need to do to import these files is do:
=import "std/<file>.earl"=.
#+end_quote

** Stack

*** *Import*: ="std/stack.earl"=

*** *Module*: =Stack=

*** *Class List*:

#+begin_quote
#+begin_example
T [init: list] -> Stack.T
#+end_example

Creates a =Stack= container with the initializer list =init=.
#+end_quote

*** Implements

#+begin_quote
#+begin_example
push(elem: any) -> unit
#+end_example

Inserts =elem= onto the top of the stack.
#+end_quote

#+begin_quote
#+begin_example
pop() -> unit
#+end_example

Removes the most recently inserted element.
#+end_quote

#+begin_quote
#+begin_example
top() -> any
#+end_example

Get the most recently added item.
#+end_quote

#+begin_quote
#+begin_example
empty() -> bool
#+end_example

Check if the stack is empty
#+end_quote

*** *Function List*: /None/

*** *Examples*

#+begin_example
let s = Stack.T([]);

for i in 0..10 {
    s.push(i);
}

while s.empty() != true {
    print(s.top());
    s.pop();
}
#+end_example

#+begin_example
9
8
7
6
5
4
3
2
1
#+end_example

** Set

*** *Import*: ="std/set.earl"=

*** *Module*: =Set=

*** *Class List*:

#+begin_quote
#+begin_example
T [init: list, compar: closure(x1: any, x2: type(x1)) -> int] -> Set.T
#+end_example

where =compar= is some ordering function $F(x_1, x_2) \rightarrow k \in \{2,1,0\}$

and $F$ is defined by

\[
F(x_1, x_2) = \begin{cases}
      2 & \text{if } R(x_1) > R(x_2) \\
      1 & \text{if } R(x_2) > R(x_1) \\
      0 & \text{if } R(x_1) = R(x_2)
   \end{cases}
\]

and $R(x)$ is some ranking function that produces a rank of $x$.

Creates a =Set= container with the initializer list =init= and the
comparison function =compar=. This container stores the values
in a binary search tree, so it needs to know how to compare the values
and decide which is bigger and which isn't.

Time complexity: $O(n \log n)$ where $n = |$ =init= $|$.

#+end_quote

*** Implements

#+begin_quote
#+begin_example
insert(elem: any) -> unit
#+end_example

Inserts =elem= into the =set=.

Time complexity: $O(\log n)$ where $n = |$ =T= $|$.
#+end_quote

#+begin_quote
#+begin_example
contains(elem: any) -> bool
#+end_example

Check if =elem= is in the set.

Time complexity: $O(\log n)$ where $n = |$ =T= $|$.
#+end_quote

#+begin_quote
#+begin_example
extract() -> list
#+end_example

Extracts the elements of the set as a =list=.

Time complexity: $O(\log n)$ where $n = |$ =T= $|$.
#+end_quote

#+begin_quote
#+begin_example
dump() -> unit
#+end_example

Prints the contents of the =set=.

Time complexity: $O(\log n)$ where $n = |$ =T= $|$.
#+end_quote

*** *Function List*: /None/

** List

*** *Import*: ="std/list.earl"=

*** *Module*: =List=

*** *Class List*: /None/

*** *Function List*:

#+begin_quote
#+begin_example
preset(elem: any, cap: int) -> list
#+end_example

Create a list filled with =elem= of length =cap=.

Time complexity: $O(n)$ where $n =$ =cap=.
#+end_quote

#+begin_quote
#+begin_example
from_range(start: int, stop: int, stride: int) -> list[int]
#+end_example

Create a list filled with the numbers from =start= to =stop= (inclusive)
and increment the number by =stride=.

Time complexity: $O(n)$ where $n =$ (=stop= - =start=) / =stride=.
#+end_quote

#+begin_quote
#+begin_example
fill(@ref lst: list, k: any) -> unit
#+end_example

Fill the list =lst= with element =k=.

Time complexity: $O(n)$ where $n = |$ =lst= $|$.
#+end_quote

#+begin_quote
#+begin_example
sum(@ref lst: list[int]) -> int
#+end_example

Sum up all elements of the list =lst=.

Time complexity: $O(n)$ where $n = |$ =lst= $|$.
#+end_quote

#+begin_quote
#+begin_example
find(@ref lst: list, @ref elem: any) -> int
#+end_example

Return the index that =elem= appears in =lst=. Returns =-1=
if it does not exist.

Time complexity: $O(n)$ where $n = |$ =lst= $|$.
#+end_quote

#+begin_quote
#+begin_example
count(@ref lst: list, @ref elem: any) -> int
#+end_example

Count the number of times that =elem= appears in =lst=.

Time complexity: $O(n)$ where $n = |$ =lst= $|$.
#+end_quote

#+begin_quote
#+begin_example
quicksort(@ref lst: list, compar: closure) -> unit
#+end_example

where =compar= is some ordering function $F(x_1, x_2) \in \{true, false\}$

and $F$ is defined by

\[
F(x_1, x_2) = \begin{cases}
      true & \text{if } R(x_1) \ge R(x_2) \\
      false & \text{if } R(x_1) < R(x_2)
   \end{cases}
\]

and $R(x)$ is some ranking function that produces a rank of $x$.

Performs the quicksort sorting algorithm on =lst= and
sorts by the comparison closure =compar=.
#+end_quote

** IO

*** *Import*: ="std/io.earl"=

*** *Module*: =IO=

*** *Class List*: /None/

*** *Function List*:

#+begin_quote
#+begin_example
file_to_str(fp: str) -> str
#+end_example

Opens the file at the filepath =fp= in read (=r=) mode. Returns
the contents of the file as a =str= and closes the file.
#+end_quote

** Math

*** *Import*: ="std/math.earl"=

*** *Module*: =Math=

*** *Class List*: /None/

*** *Function List*:

#+begin_quote
#+begin_example
max(x: int, y: int) -> int
#+end_example

Returns the max between =x= and =y=.
#+end_quote

#+begin_quote
#+begin_example
min(x: int, y: int) -> int
#+end_example

Returns the min between =x= and =y=.
#+end_quote

#+begin_quote
#+begin_example
abs(x: int) -> int
#+end_example

Returns the absolute value of =x=.
#+end_quote

** Utils

*** *Import*: ="std/utils.earl"=

*** *Module*: =Utils=

*** *Class List*: /None/

*** *Function List*:

#+begin_quote
#+begin_example
is_even(n: int) -> bool
#+end_example

Returns =true= if =n= is even, =false= if odd.
#+end_quote

#+begin_quote
#+begin_example
swap(@ref x1, @ref x2) -> unit
#+end_example

Swaps the values of =x1= and =x2=.
#+end_quote
