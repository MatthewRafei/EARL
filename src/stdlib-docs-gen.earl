module Main

import "std/io.earl"
import "std/str.earl"

class Parameter [] {
    @pub let name, ty = ("", "");
    @pub fn add_name(name) {this.name = name;}
    @pub fn add_ty(ty) {this.ty = ty;}
}

class Function [] {
    @pub let name, returns, description = ("", "", "");
    @pub let parameters = [];
    @pub fn add_name(name) {this.name = name;}
    @pub fn add_param(param) {this.parameters.append(param);}
    @pub fn add_returns(returns) {this.returns = returns;}
    @pub fn add_description(desc) {this.description = description;}
}

class Class [] {let _ = unimplemented();}

class Enum [] {let _ = unimplemented();}

let lst = IO::file_to_str("std/os.earl").split("###");
lst.foreach(|@ref el| { Str::trim(el); });
lst.pop(0); # pop MIT License
lst.foreach(|@ref el| {
    let newline = Str::find(el, '\n');
    if newline {
        if el.substr(0, newline.unwrap()) != "MODULE" {
            el = el.substr(0, newline.unwrap());
        }
    }
});

let cur_item = none;

foreach el in lst {
    let parts = el.split(" ");
    println(parts);
}
