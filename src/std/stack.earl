# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### MODULE
module Stack

### BEGIN CLASSES

### NAME T
### PARAMETER init: list
### DESCRIPTION
###   Create a stack based off of the initializer list `init`
###   if it contains any elements.
@pub class T [init] {
    @ref let lst = init;

    ### BEGIN METHODS

    ### NAME push
    ### PARAMETER x: any
    ### RETURNS unit
    ### DESCRIPTION
    ###   Pushes `x` onto the `stack`.
    @pub fn push(x) {
        this.lst.append(x);
    }

    ### NAME pop
    ### RETURNS unit
    ### DESCRIPTION
    ###   Pops last element on the `stack`.
    @pub fn pop() {
        this.lst.pop(len(this.lst)-1);
    }

    ### NAME empty
    ### RETURNS bool
    ### DESCRIPTION
    ###   Return `true` if the `stack` is empty or `false` if otherwise.
    @pub fn empty() {
        return len(this.lst) == 0;
    }

    ### NAME top
    ### RETURNS any
    ### DESCRIPTION
    ###   Returns the element at the top of the `stack`.
    @pub fn top() {
        return this.lst[len(this.lst)-1];
    }

    ### NAME show
    ### RETURN unit
    ### DESCRIPTION
    ###   Prints the entire `stack`.
    @pub fn show() {
        for i in 0 to len(lst) {
            println(lst[i]);
        }
    }

    ### END METHODS
}

### END CLASSES
