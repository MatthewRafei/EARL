mod Set

class Node [value] {
    @pub value = value;
    @pub left = none;
    @pub right = none;
}

@pub
class T [init] {
    root = none;

    fn constructor() {
        for i in 0..len(init) {
            insert(init[i]);
        }
    }

    @pub fn insert(value) {
        this.__insert(this.root, value);
    }

    @pub fn contains(value) {
        return this.__contains(this.root, value);
    }

    @pub fn remove(value) {
        unimplemented("Set.T.remove");
    }

    @pub fn dump() {
        this.__dump(this.root);
    }

    fn __dump(@ref cur) {
        if cur.is_some() {
            __dump(cur.unwrap().left);
            print(cur.unwrap().value);
            __dump(cur.unwrap().right);
        }
    }

    fn __contains(@ref cur, value) {
        if cur.is_none() {
            return false;
        }
        if value > cur.unwrap().value {
            return this.__contains(cur.unwrap().right, value);
        }
        else if value < cur.unwrap().value {
            return this.__contains(cur.unwrap().left, value);
        }
        return true;
    }

    fn __insert(@ref cur, value) {
        if cur.is_none() {
            cur = some(Node(value));
        }
        else if value > cur.unwrap().value {
            this.__insert(cur.unwrap().right, value);
        }
        else if value < cur.unwrap().value {
            this.__insert(cur.unwrap().left, value);
        }
    }
}
