import "std/math.earl"

mod Set

class Node [value] {
    @pub value = value;
    @pub left = none;
    @pub right = none;
}

@pub
class T [init] {
    root = none;

    fn constructor() {
        for i in 0..len(init) {
            insert(init[i]);
        }
    }

    @pub fn insert(value) {
        __insert(root, value);
    }

    @pub fn contains(value) {
        return __contains(root, value);
    }

    @pub fn remove(value) {
        unimplemented("Set.T.remove");
    }

    @pub fn dump() {
        this.__dump(root);
    }

    fn __dump(@ref cur) {
        if is_none(cur) == false {
            __dump(cur.left);
            print(cur.value);
            __dump(cur.right);
        }
    }

    fn __contains(@ref cur, value) {
        if is_none(cur) {
            return false;
        }
        if value > cur.value {
            return __contains(cur.right, value);
        }
        else if value < cur.value {
            return __contains(cur.left, value);
        }
        return true;
    }

    fn __insert(@ref cur, value) {
        if is_none(cur) {
            cur = Node(value);
        }
        else if value > cur.value {
            __insert(cur.right, value);
        }
        else if value < cur.value {
            __insert(cur.left, value);
        }
    }
}
