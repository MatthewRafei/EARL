# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

module Set

class Node [value] {
    @pub value = value;
    @pub left = none;
    @pub right = none;
}

@pub
class T [init, compar] {
    root = none;
    compar = compar;

    fn constructor() {
        for i in 0 to len(init) {
            insert(init[i]);
        }
    }

    @pub fn extract() {
        return this.__extract(this.root);
    }

    fn __extract(cur) {
        let ret = [];
        if cur.is_some() {
            ret = ret
            + [cur.unwrap().value]
            + this.__extract(cur.unwrap().left)
            + this.__extract(cur.unwrap().right);
        }
        return ret;
    }

    @pub fn insert(value) {
        this.__insert(this.root, value);
    }

    @pub fn contains(value) {
        return this.__contains(this.root, value);
    }

    @pub fn remove(value) {
        unimplemented("Set.T.remove");
    }

    @pub fn show() {
        this.__show(this.root);
    }

    fn __show(@ref cur) {
        if cur.is_some() {
            __show(cur.unwrap().left);
            println(cur.unwrap().value);
            __show(cur.unwrap().right);
        }
    }

    fn __contains(@ref cur, value) {
        if cur.is_none() {
            return false;
        }

        match this.compar(cur.unwrap().value, value) {
            2 -> { return this.__contains(cur.unwrap().right, value); }
            1 -> { return this.__contains(cur.unwrap().left, value); }
            0 -> { return true; }
        }

        return false;
    }

    fn __insert(@ref cur, v) {
        if cur.is_none() {
            cur = some(Node(v));
        }

        match this.compar(cur.unwrap().value, v) {
            2 -> { return this.__insert(cur.unwrap().right, v); }
            1 -> { return this.__insert(cur.unwrap().left, v); }
        }
    }
}

# The default closure that the set can use
# when dealing with integers.
@pub let DEFAULT_INT_SET_COMPAR = |x0, x1| {
    if x0 > x1 { return 2; }
    if x1 > x0 { return 1; }
    return 0;
};
