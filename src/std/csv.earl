# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### MODULE
module CSV

import "std/char.earl"

fn consume_until(s, predicate) {
    let i = 0;
    let buf = "";
    while predicate(s[i]) {
        buf += s[i];
        i += 1;
    }
    return (buf, i+1);
}

### BEGIN FUNCTIONS

### NAME parse
### PARAMETER src: str
### RETURNS list
### DESCRIPTION
###  Takes src file path of csv file and parses it
@pub fn parse(src) {
    unimplemented("Char::parse");

    let res = [];
    let lst = [];
    src.foreach(|c| { lst.append(c); });

    for i in 0 to len(lst) {
        let c = src[i];
        if c == '"' {
            let parts = consume_until(lst[(i+1):_], |d| { d == '"'; });
            println("appending: ", parts[0]);
            res.append(parts[0]);
            i += parts[1];
        }
    }
}

### END FUNCTIONS
