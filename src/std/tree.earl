mod Tree

class Node [value] {
    value = value;
    left = none;
    right = none;

    @pub fn value() {
        return this.value;
    }

    @pub fn left() {
        return this.left;
    }

    @pub fn right() {
        return this.right;
    }
}

@pub class T {
    root = none;

    fn __insert(@ref cur, value) {
        if is_none(cur) {
            cur = Node(value);
        }
        else if value > cur.value() {
            __insert(cur.right(), value);
        }
        else if value < cur.value() {
            __insert(cur.left(), value);
        }
        else {
            assert(false);
        }
    }

    fn __contains(@ref cur, value) {
        if is_none(cur) == false {
            if cur.value() == value {
                return true;
            }
            else if value > cur.value() {
                return __contains(cur.right(), value);
            }
            return __contains(cur.left(), value);
        }
        return false;
    }

    fn __dump(@ref cur) {
        if is_none(cur) == false {
            __dump(cur.left());
            print(cur.value());
            __dump(cur.right());
        }
    }

    @pub fn dump() {
        __dump(this.root);
    }

    @pub fn contains(value) {
        return __contains(this.root, value);
    }

    @pub fn insert(value) {
        __insert(this.root, value);
    }
}
