# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

module AVL

import "std/math.earl"

class Node [value] {
    @pub let value = value;
    @pub let left = none;
    @pub let right = none;
    @pub let height = 1;
}

@pub class T [init] {
    let root = none;

    fn constructor() {
        for i in 0 to len(init) {
            this.root = this.__insert(this.root, init[i]);
        }
    }

    fn __insert(r, value) {
        if !r {
            return some(Node(value));
        }
        else if value < r.unwrap().value {
            r.unwrap().left = this.__insert(r.unwrap().left, value);
        }
        else {
            r.unwrap().right = this.__insert(r.unwrap().right, value);
        }

        r.unwrap().height = 1 + Math::max(this.height(r.unwrap().left), this.height(r.unwrap().right));
        let balance = this.balance(r);

        # Left rotation
        if balance > 1 && value < r.unwrap().left.unwrap().value {
            return this.right_rot(r);
        }

        # Right rotation
        if balance < -1 && value > r.unwrap().right.unwrap().value {
            return this.left_rot(r);
        }

        # Left-right rotation
        if balance > 1 && value > r.unwrap().left.unwrap().value {
            r.unwrap().left = this.left_rot(r.unwrap().left);
        }

        # Right-left rotation
        if balance < -1 && value < r.unwrap().right.unwrap().value {
            r.unwrap().right = this.right_rot(r.unwrap().right);
            return this.left_rot(r);
        }

        return r;
    }

    fn height(node) {
        if !node {
            return 0;
        }
        return node.unwrap().height;
    }

    fn balance(node) {
        if !node {
            return 0;
        }
        return this.height(node.unwrap().left) - this.height(node.unwrap().right);
    }

    fn left_rot(z) {
        assert(z.is_some());

        let y = z.unwrap().right;
        let T2 = y.unwrap().left;

        y.unwrap().left = z;
        z.unwrap().right = T2;

        z.unwrap().height = 1 + Math::max(this.height(z.unwrap().left), this.height(z.unwrap().right));
        y.unwrap().height = 1 + Math::max(this.height(y.unwrap().left), this.height(y.unwrap().right));

        return y;
    }

    fn right_rot(z) {
        assert(z.is_some());

        let y = z.unwrap().left;
        let T3 = y.unwrap().height;

        y.unwrap().right = z;
        z.unwrap().left = T3;

        z.unwrap().height = 1 + Math::max(this.height(z.unwrap().left), this.height(z.unwrap().right));
        y.unwrap().height = 1 + Math::max(this.height(y.unwrap().left), this.height(y.unwrap().right));

        return y;
    }

    fn min_value_node(r) {
        let current = r;
        while current.unwrap().left {
            current = current.unwrap().left;
        }
        return current;
    }

    fn search(r, value) {
        if !r || r.unwrap().value == value {
            return r;
        }
        if r.unwrap().value < value {
            return this.search(r.unwrap().right, value);
        }
        return this.search(r.unwrap().left, value);
    }

    @pub fn insert(value) {
        this.root = this.__insert(this.root, value);
    }

    @pub fn contains(value) {
        return this.search(this.root, value).is_some();
    }

    @pub fn show() {
        this.__show(this.root);
    }

    fn __show(@ref cur) {
        if cur.is_some() {
            __show(cur.unwrap().left);
            println(cur.unwrap().value);
            __show(cur.unwrap().right);
        }
    }
}

# The default closure that the set can use
# when dealing with integers.
@pub let DEFAULT_INT_SET_COMPAR = |x0, x1| {
    if x0 > x1 { return 2; }
    if x1 > x0 { return 1; }
    return 0;
};
