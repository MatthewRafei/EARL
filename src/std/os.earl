# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

module OS

# List all items at `path`.
@pub fn ls(path) {
    return __internal_ls__(path);
}

# Create a new directory at `path`.
@pub fn mkdir(path) {
    __internal_mkdir__(path);
}

# Creates a full path directory as well as a file
# i.e., ./dir1/dir2/dir3/file.txt. The last entry
# in the path will be used as the file to be created.
# It is functionally equivalent to:
#     mkdir -p <path> && touch <path>/file.txt.
@pub fn fullpath_mkdir(fullpath) {
    if len(fullpath) == 0 {
        panic("fullpath_mkdir: the path specified cannot be empty");
    }

    let parts = fullpath.split("/");

    let curpath = "";
    for i in 0 to len(parts)-1 {
        curpath = curpath + parts[i];
        mkdir(curpath);
        curpath = curpath + '/';
    }
    curpath = curpath + parts.back();

    let f = open(curpath, "w");
    f.write("");
    f.close();
}

@pub fn name_and_ext(filepath) {
    assert(len(filepath) > 0);

    let ext = "";
    let name = "";
    let period = 0;

    for i in len(filepath)-1 to 0 {
        if filepath[i] == '.' {
            period = i;
            break;
        }
        ext += filepath[i];
    }

    ext = ext.rev();

    for i in 0 to period {
        name += filepath[i];
    }

    if name == "" && ext == "" {
        return (none, none);
    }
    if name == "" {
        return (ext, none);
    }
    if ext == "" {
        return (name, none);
    }

    return (name, ext);
}
