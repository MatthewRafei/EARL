# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### MODULE
module Queue

### BEGIN CLASSES

### NAME T
### PARAMETER init: list
### DESCRIPTION
###   Provides a class for the `queue` data structure.
@pub class T [init] {
    let m_lst = init;

    ### BEGIN METHODS

    ### NAME empty
    ### RETURNS bool
    ### DESCRIPTION
    ###   Returns `true` if the `queue` is empty, or `false` if otherwise.
    @pub fn empty() {
        return len(m_lst) == 0;
    }

    ### NAME enqueue
    ### PARAMETER value: any
    ### RETURNS unit
    ### DESCRIPTION
    ###   Inserts `value` into the `queue`.
    @pub fn enqueue(value) {
        m_lst.append(value);
    }

    ### NAME dequeue
    ### RETURNS unit
    ### DESCRIPTION
    ###   Pops the element in the font of the `queue`.
    @pub fn dequeue() {
        assert(empty() == false);
        m_lst.pop(0);
    }

    ### NAME peek
    ### RETURNS any
    ### DESCRIPTION
    ###   Returns the element in the font of the `queue`.
    @pub fn peek() {
        assert(empty() == false);
        return m_lst[0];
    }

    ### NAME size
    ### RETURNS int
    ### DESCRIPTION
    ###   Returns the size of the `queue`.
    @pub fn size() {
        return len(m_lst);
    }

    ### END METHODS
}

### END CLASSES