# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

module Math

import "std/list.earl"

@pub fn max(x, y) {
    if x >= y {
        return x;
    }
    return y;
}

@pub fn min(x, y) {
    if x <= y {
        return x;
    }
    return y;
}

@pub fn abs(x) {
    if x < 0 {
        return x * (0-1);
    }
    return x;
}

# Statistical Functions

# Mode
@pub fn mode(lst) {
    if len(lst) == 0 {
        return none;
    }
    let count = 0;
    let max_count = 0;
    let lst_modes = [];
    for i in 0 to len(lst) {
        count = List::count(lst, lst[i]);
        if max_count == count && (List::find(lst, lst[i]) != -1){
            lst_modes.append(lst[i]);
            count = 0;
        }
        if max_count < count {
            lst_modes = [];
            lst_modes.append(lst[i]);
            max_count = count;
            count = 0;
        }
    }
    return lst_modes;
}   


# Median


