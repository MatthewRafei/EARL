mod List

import "std/utils.earl"

@pub
fn preset(elem, cap) {
    let lst = [];
    for i in 0..cap {
        lst.append(elem);
    }
    return lst;
}

@pub
fn from_range(start, stop, stride) {
    assert(stride != 0);

    let lst = [];
    let i = start;

    while i <= stop {
        lst.append(i);
        i = i+stride;
    }

    return lst;
}

@pub
fn fill(@ref lst, k) {
    for i in 0..len(lst) {
        lst[i] = k;
    }
}

@pub
fn sum(@ref lst) {
    let s = 0;
    for i in 0..len(lst) {
        s = s + lst[i];
    }
    return s;
}

@pub
fn find(@ref lst, @ref elem) {
    let i = 0;
    while i < len(lst) {
        if elem == lst[i] {
            return i;
        }
        i = i+1;
    }
    return 0-1;
}

@pub
fn count(@ref lst, @ref elem) {
    let c = 0;
    for i in 0..len(lst) {
        if elem == lst[i] {
            c = c+1;
        }
    }
    return c;
}

@pub
fn quicksort(@ref lst, compar) {
    fn __quicksort(@ref lst, low, high, @ref compar) {
        let partition = |@ref lst, low, high| {
            let pivot = lst[high];
            let i = low-1;

            for j in low..high {
                if compar(lst[j], pivot) {
                    i = i+1;
                    Utils.swap(lst[i], lst[j]);
                }
            }

            Utils.swap(lst[i+1], lst[high]);

            return i+1;
        };

        if low < high {
            let pi = partition(lst, low, high);
            __quicksort(lst, low, pi-1, compar);
            __quicksort(lst, pi+1, high, compar);
        }
    }

    return __quicksort(lst, 0, len(lst)-1, compar);
}


