# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### MODULE
module BasicLexer

import "std/char.earl" full

### BEGIN ENUMS

### NAME TokenType
### PARAMETER Ident: int
### PARAMETER StrLit: int
### PARAMETER IntLit: int
### PARAMETER CharLit: int
### PARAMETER Hash: int
### PARAMETER LParen: int
### PARAMETER RParen: int
### PARAMETER LCurly: int
### PARAMETER RCurly: int
### PARAMETER LBracket: int
### PARAMETER RBracket: int
### PARAMETER Plus: int
### PARAMETER Minus: int
### PARAMETER Asterisk: int
### PARAMETER ForwardSlash: int
### PARAMETER Equals: int
### PARAMETER Comma: int
### PARAMETER Greaterthan: int
### PARAMETER Lessthan: int
### PARAMETER Colon: int
### PARAMETER At: int
### PARAMETER Period: int
### PARAMETER Semicolon: int
### PARAMETER Backtick: int
### PARAMETER Underscore: int
### PARAMETER Pipe: int
### PARAMETER Ampersand: int
### PARAMETER Hash: int
### PARAMETER Percent: int
### PARAMETER Caret: int
### PARAMETER DollarSign: int
### PARAMETER Tilde: int
### PARAMETER Keyword: int
### DESCRIPTION
###   Individual identifiers for each token type.
@pub enum TokenType {
    Ident=0,
    StrLit,
    IntLit,
    CharLit,
    Hash,
    LParen,
    RParen,
    LCurly,
    RCurly,
    LBracket,
    RBracket,
    Plus,
    Minus,
    Asterisk,
    ForwardSlash,
    Equals,
    Comma,
    Greaterthan,
    Lessthan,
    Colon,
    At,
    Period,
    Semicolon,
    Backtick,
    Underscore,
    Pipe,
    Ampersand,
    Hash,
    Percent,
    Caret,
    DollarSign,
    Tilde,
    Keyword,
    Bang,
}

### END ENUMS

### BEGIN CLASSES

### NAME Token
### PARAMETER lx: str
### PARAMETER ty: TokenType
### PARAMETER r: int
### PARAMETER c: int
### PARAMETER fp: str
### DESCRIPTION
###   A token class that constists of:
###     `lx` -> lexeme,
###     `ty` -> token type,
###     `r`  -> row,
###     `c`  -> column,
###     `fp` -> filepath
@pub class Token [lx, ty, r, c, fp] {
    ### BEGIN MEMBERS
    ### NAME lx
    ### TYPE str
    ### DESCRIPTION
    ###   The `lexeme` of the token.
    @pub let lx = lx;

    ### NAME ty
    ### TYPE TokenType
    ### DESCRIPTION
    ###   The type of the token.
    @pub let ty = ty;

    ### NAME r
    ### TYPE int
    ### DESCRIPTION
    ###   The row that the token is located at.
    @pub let r = r;

    ### NAME c
    ### TYPE int
    ### DESCRIPTION
    ###   The column that the token is located at.
    @pub let c = c;

    ### NAME fp
    ### TYPE int
    ### DESCRIPTION
    ###   The filepath that the token is located at.
    @pub let fp = fp;

    ### END MEMBERS
}

### NAME T
### PARAMETER keywords: tuple<str>|list<str>
### DESCRIPTION
###   Creates a new Basic Lexer class with the keywords set to `keywords`.
@pub class T [keywords] {
    let kwds = keywords;

    ### BEGIN MEMBERS

    ### NAME tokens
    ### TYPE list<Token>
    ### DESCRIPTION
    ###   The list of tokens that the lexer currently holds.
    @pub let tokens = [];

    ### NAME default_ops
    ### TYPE Dict<str>
    ### DESCRIPTION
    ###   The default operators and symbols.
    @pub let default_ops = {
        "+": TokenType.Plus,
        "-": TokenType.Minus,
        "*": TokenType.Asterisk,
        "/": TokenType.ForwardSlash,
        "=": TokenType.Equals,
        ",": TokenType.Comma,
        "%": TokenType.Percent,
        "$": TokenType.DollarSign,
        "^": TokenType.Caret,
        "{": TokenType.LCurly,
        "}": TokenType.RCurly,
        "(": TokenType.LParen,
        ")": TokenType.RParen,
        "[": TokenType.LBracket,
        "]": TokenType.RBracket,
        ">": TokenType.Greaterthan,
        "<": TokenType.Lessthan,
        ":": TokenType.Colon,
        "@": TokenType.At,
        ".": TokenType.Period,
        ";": TokenType.Semicolon,
        "`": TokenType.Backtick,
        "_": TokenType.Underscore,
        "|": TokenType.Pipe,
        "&": TokenType.Ampersand,
        "#": TokenType.Hash,
        "~": TokenType.Tilde,
        "!": TokenType.Bang
    };

    ### END MEMBERS

    fn consume_while(s, pred) {
        let buf, i = ("", 0);
        while i < len(s) && pred(s[i]) {
            buf += str(s[i]);
            i += 1;
        }
        return (buf, i);
    }

    fn handleop(s, r, c, fp) {
        let s0 = s;
        while len(s0) > 0 {
            if this.default_ops[s0] {
                return (Token(s0, this.default_ops[s0].unwrap(), r, c, fp), len(s0));
            }
            s0.pop(len(s0)-1);
        }
        panic(f"unknown token: {s}");
    }

    ### BEGIN METHODS

    ### NAME lex
    ### PARAMETER src: str
    ### PARAMETER fp: str
    ### RETURNS unit
    ### DESCRIPTION
    ###   Performs basic lexical analysis on the source
    ###   code `src` at the filepath `fp`.
    @pub fn lex(src, fp) {
        let r, c = (1, 0);
        for i in 0 to len(src) {
            if src[i] == '\n' || src[i] == '\r' {
                r += 1;
                c = 0;
            }
            else if src[i] == ' ' || src[i] == '\t'{
                c += 1;
            }
            else if Char::isalpha(src[i]) || src[i] == '_' {
                let lx, dx = consume_while(src.substr(i, len(src)), |c| {
                    return Char::isalnum(c) || c == '_';
                });

                let t = none;

                foreach @ref @const kw in this.kwds {
                    if lx == kw {
                        t = some(Token(lx, TokenType.Keyword, r, c, fp));
                        break;
                    }
                }

                if !t {
                    t = some(Token(lx, TokenType.Ident, r, c, fp));
                }
                this.tokens.append(t.unwrap());
                i += dx;
                c += dx;
            }
            else if Char::isnum(src[i]) {
                let lx, dx = consume_while(src.substr(i, len(src)), |c| {
                    return Char::isnum(c);
                });
                let t = Token(lx, TokenType.IntLit, r, c, fp);
                this.tokens.append(t);
                i += dx;
                c += dx;
            }
            else if src[i] == '"' {
                let lx, dx = consume_while(src.substr(i+1, len(src)), |c| {
                    return c != '"';
                });
                let t = Token(lx, TokenType.StrLit, r, c, fp);
                this.tokens.append(t);
                i += dx+1;
                c += dx+1;
            }
            else if src[i] == '\'' {
                let lx, dx = consume_while(src.substr(i+1, len(src)), |c| {
                    return c != '\'';
                });
                let t = Token(lx, TokenType.CharLit, r, c, fp);
                this.tokens.append(t);
                i += dx+1;
                c += dx+1;
            }
            else {
                let potential_op, _ = consume_while(src.substr(i, len(src)), |c| {
                    return !Char::isalnum(c) && c != ' ' && c != '\n' && c != '\t'  && c != '\r';
                });
                let t, dx = handleop(potential_op, r, c, fp);
                this.tokens.append(t);
                i += dx-1;
                c += dx-1;
            }
        }
    }

    ### NAME next
    ### RETURNS option<Token>
    ### DESCRIPTION
    ###   Returns `some(token)` if the lexer is not empty and pops it
    ###   from the lexer, or `none` if no tokens exist.
    @pub fn next() {
        if this.sz() == 0 {
            return none;
        }
        let t = this.tokens[0];
        this.tokens.pop(0);
        return some(t);
    }

    ### NAME peek
    ### PARAMETER pk: int
    ### RETURNS option<Token>
    ### DESCRIPTION
    ###   Returns the token at location `pk` wrapped in `some` or `none` if not found.
    @pub fn peek(pk) {
        if this.sz() == 0 {
            return none;
        }
        assert(pk >= 0 && pk < this.sz());
        return some(this.tokens[pk]);
    }

    ### NAME sz
    ### RETURNS int
    ### DESCRIPTION
    ###   Return the number of tokens the lexer currently holds.
    @pub fn sz() {
        return len(this.tokens);
    }

    ### END METHODS
}

### END CLASSES
