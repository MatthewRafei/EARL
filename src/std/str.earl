# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### MODULE
module Str

### BEGIN FUNCTIONS

### NAME to_list
### PARAMETER s: @ref str
### RETURNS list
### DESCRIPTION
###   Convert the string `s` to a `list`.
@pub fn to_list(@ref s) {
    let lst = [];
    for i in 0 to len(s) {
        lst.append(s[i]);
    }
    return lst;
}

### NAME find
### PARAMETER s: @ref str
### PARAMETER t: char
### RETURNS int
### DESCRIPTION
###   Returns the index of target `t` in a `some` value or `none` if not found.
@pub fn find(@ref s, t) {
    for i in 0 to len(s) {
        if s[i] == t { return some(i); }
    }
    return none;
}

### NAME trim
### PARAMETER s: @ref str
### RETURNS unit
### DESCRIPTION
###   Trims all whitespace (spaces, tabs, newlines etc.) from `s` in-place.
@pub fn trim(@ref s) {
    while len(s) > 0 && (s[0] == ' '
        || s[0] == '\n'
        || s[0] == '\t'
        || s[0] == '\r') {
        s.pop(0);
    }
    while len(s) > 0 && (s.back() == ' '
        || s.back() == '\n'
        || s.back() == '\t'
        || s.back() == '\r') {
        s.pop(len(s)-1);
    }
}

### END FUNCTIONS
