# MIT License

# Copyright (c) 2023 malloc-nbytes

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### MODULE
module SinglyLL

class Node [value] {
    @pub let value = value;
    @pub let next = none;
}

### BEGIN CLASSES

### NAME T
### PARAMETER init: list
### DESCRIPTION
###   Takes the initializer list `init` and creates a linked list
###   of the elements if they exist.
@pub class T [init] {
    let hd = none;

    fn constructor() {
        for i in 0 to len(init) {
            this.insert(init[i]);
        }
    }

    ### BEGIN METHODS

    ### NAME insert
    ### PARAMETER value: any
    ### RETURNS unit
    ### DESCRIPTION
    ###   Inserts `value` into the list.
    @pub fn insert(value) {
        let n = some(Node(value));

        if this.hd.is_none() {
            this.hd = n;
        }
        else {
            n.unwrap().next = hd;
            hd = n;
        }
    }

    ### NAME contains
    ### PARAMETER value: any
    ### RETURNS bool
    ### DESCRIPTION
    ###   Checks to see if `value` is in the list. Returns `true` if so, else `false`.
    @pub fn contains(value) {
        let it = hd;
        while it.is_some() && it.unwrap().value != value{
            it = it.unwrap().next;
        }
        if it.is_some() && it.unwrap().value == value {
            return true;
        }
        return false;
    }

    ### NAME show
    ### RETURNS unit
    ### DESCRIPTION
    ###   Prints all elements in the list to `stdout`.
    @pub fn show() {
        let it = hd;
        while it.is_some() {
            println(it.unwrap().value);
            it = it.unwrap().next;
        }
    }

    ### END METHODS

}

### END CLASSES
