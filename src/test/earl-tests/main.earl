module Test

import "point-class.1.earl"
import "test-std.earl"
import "other.1.earl" full

fn test_tuple1() {
    print("test_tuple1...");

    let t = (1,2,3);
    foreach i in t {
        assert(i == t[i-1]);
    }

    assert(t + (4,5) == (1,2,3,4,5));

    let copy = t;

    assert(copy == t);

    let single = (-1,);

    assert(single == (-1,));

    println("ok");
}

fn test_nested_func1() {
    print("test_nested_func1... ");
    fn test() {
        fn inner(i) {
            if i == 5 { return i; }
            return inner(i+1);
        }
        inner(0);
    }
    assert(test() == 5);
    println("ok");
}

fn test_match1() {
    print("test_match1... ");

    let x = 5;

    match x {
        _ -> { assert(true); }
        5 -> { assert(false); }
    }

    println("ok");
}

fn test_closure5() {
    print("test_closure5... ");

    let cl1 = |x| {
        if x == 5 { return x; }
        return cl1(x+1);
    };
    assert(cl1(0));

    println("ok");
}

fn test_closure4() {
    print("test_closure4... ");

    let other_file_cl = |a, b| { return Other1::sum(a, b); };
    assert(other_file_cl(1, 2) == 3);

    println("ok");
}

fn test_closure3() {
    print("test_closure3... ");

    let cl = |cl2, a| { return cl2(a); };

    assert(cl(|x| { return x; }, 9) == 9);

    println("ok");
}

fn test_closure2() {
    print("test_closure2 ...");

    fn __take_closure(cl, a, b) {
        return cl(a, b);
    }

    let cl = |a, b| { return a+b; };

    assert(__take_closure(cl, 1, 2) == 3);
    assert(__take_closure(cl, 3, 4) == 7);
    assert(__take_closure(|a, b| { return a == b; }, 3, 4) == false);
    assert(__take_closure(|a, b| { return some(a+b); }, 4, 1) == some(5));

    assert(cl(cl(1, 2), cl(3, 4)) == 10);

    let count_evens = |lst| {
        let res = [];
        for i in 0 to len(lst) {
            if lst[i] % 2 == 0 {
                res.append(some(lst[i]));
            }
        }
        return res;
    };

    assert(count_evens([1,2,3,4,5]) == [some(2),some(4)]);

    println("ok");
}

fn test_closure1() {
    print("test_closure1... ");

    let cl = |x| { return x; };

    assert(cl(12) == 12);

    let cl2 = |x, y| {
        return x+y;
    };

    let s = cl2(1, 2);
    assert(s == 3);

    println("ok");
}

fn test_mutating_option_values() {
    print("test_mutating_option_values... ");

    let x = none;
    assert(x == none);
    x = some(1);
    assert(x == some(1));

    x.unwrap() = 2;
    assert(x == some(2));
    assert(x.unwrap() == 2);

    x = some('a');
    assert(x == some('a'));

    println("ok");
}

fn test_none_values2() {
    print("test_none_values2... ");

    let s1 = none;
    let s2 = none;

    assert(s1.is_none() && s2.is_none());

    s1 = some("hello");
    s2 = some("world");

    assert(s1.is_some() && s2.is_some());

    assert(s1.unwrap() == "hello");
    assert(s2.unwrap() == "world");

    assert(s1.unwrap() + " " + s2.unwrap() == "hello world");
    assert(s1.unwrap() + s2.unwrap() == "helloworld");
    assert(" " + s1.unwrap() + s2.unwrap() == " helloworld");
    assert(s1.unwrap() + s2.unwrap() + " " == "helloworld ");

    println("ok");
}

fn test_none_values1() {
    print("test_none_values1... ");

    let i1 = none;
    let i2 = none;

    assert(i1.is_none() && i2.is_none());

    i1 = some(1);
    i2 = some(2);

    assert(i1.is_some() && i2.is_some());
    assert(i1.unwrap() + 1 + i2.unwrap() == 4);
    assert(i1.unwrap() + i2.unwrap() + 1 == 4);
    assert(1 + i1.unwrap() + i2.unwrap() == 4);

    println("ok");
}

fn test_substr_member_intrinsic1() {
    print("test_substr_member_intrinsic1... ");

    let s = "hello world";

    assert(s.substr(0, 3) == "hel");
    assert(s.substr(6, len(s)) == "world");

    println("ok");
}

fn test_file_io_read_and_remove_lines_member_intrinsic() {
    print("test_file_io_read_and_remove_lines_member_intrinsic... ");

    let f = open("input.1.txt", "r");
    let lst = f.read().remove_lines().split(" ");

    assert(lst == ["john", "doe", "23", "foo", "jane", "doe", "43", "bar"]);

    println("ok");
}

fn test_member_intrinsic_split() {
    print("test_member_intrinsic_split... ");

    let s = "hello world !!!";

    assert(s.split(" ") == ["hello", "world", "!!!"]);

    let lst = s.split(" ");

    assert(lst[0] == "hello");
    assert(lst[0][0] == 'h');
    assert(lst.nth(0).nth(0) == 'h');

    println("ok");
}

fn test_chars1() {
    print("test_chars1... ");

    let c1 = 'a';
    let c2 = 'b';

    assert(c1 != c2);

    c1 = 'z';

    assert(c1 == 'z');

    c1 = c2;

    assert(c1 == c2);

    println("ok");
}

fn test_strs2() {
    print("test_strs2... ");

    let s1 = "hello";
    let s2 = "world";

    let s3 = s1 + " " + s2;

    assert(s3 == "hello world");

    s1 = s3;

    assert(s1 == "hello world");

    s1[0] = 'a';

    assert(s1[0] == 'a');

    println("ok");
}

fn test_strs1() {
    print("test_strs1... ");

    let s = "hello";

    assert(s == "hello");

    s = "world";

    assert(s == "world");

    println("ok");
}

fn test_booleans() {
    print("test_booleans... ");

    let t = true;
    let f = false;

    assert(t);
    assert(t == true);
    assert(f == false);

    assert(t || f == true);
    assert(f || f == false);

    println("ok");
}

fn test_point_class_import() {
    print("test_point_class_import... ");

    let p1 = PointClass::Point(1, 2, "my point 1");

    assert(p1.get_x() == 1);
    assert(p1.get_y() == 2);
    assert(p1.get_name() == "my point 1");
    assert(p1.get_sum() == 3);

    let p2 = PointClass::Point(3, 4, "my point 2");

    assert(p2.get_x() == 3);
    assert(p2.get_y() == 4);
    assert(p2.get_name() == "my point 2");
    assert(p2.get_sum() == 7);

    # Check to make sure that the original point
    # is not modified. This is because of a bug
    # that was enountered.
    assert(p1.get_x() == 1);
    assert(p1.get_y() == 2);
    assert(p1.get_name() == "my point 1");
    assert(p1.get_sum() == 3);

    println("ok");
}

fn test_func_reference2() {
    print("test_func_reference2... ");

    let lst = [1,2,3,4,5];
    Other1::modify_ref_list(lst);

    assert(lst == [2,3,4,5,6]);

    println("ok");
}

fn test_func_reference1() {
    print("test_func_reference1... ");

    let i = 1;
    Other1::modify_ref(i);

    assert(i == 2);

    println("ok");
}

fn test_reference2() {
    print("test_reference2... ");

    let lst = [1,2,3,4,5];

    @ref let ptr = lst;

    for i in 0 to len(ptr) {
        ptr[i] = ptr[i] + 1;
    }

    assert(lst == [2,3,4,5,6]);
    assert(ptr == [2,3,4,5,6]);
    assert(lst == ptr);

    println("ok");
}

fn test_reference1() {
    print("test_reference1... ");

    let orig = 1;
    @ref let ptr = orig;

    ptr = 2;

    assert(orig == 2);
    assert(ptr == 2);
    assert(orig == ptr);

    ptr = ptr + 1;

    assert(orig == 3);
    assert(ptr == 3);
    assert(orig == ptr);

    println("ok");
}

fn test_list_access2() {
    print("test_list_access2... ");

    assert(Other1::two_dim_arr()[1] == [4,5,6]);
    assert(Other1::two_dim_arr()[1].nth(0) == 4);
    assert(Other1::two_dim_arr()[1][0] == 4);

    println("ok");
}

fn test_list_access1() {
    print("test_list_access1... ");
    let lst = [1,2,3,4,5];
    for i in 0 to len(lst) {
        assert(lst[i] == i+1);
    }
    println("ok");
}

fn test_member_intrinsic_pop1() {
    print("test_member_intrinsic_pop1... ");
    let lst = [1,2,3,4,5];
    lst.pop(2);
    assert(lst == [1,2,4,5]);
    println("ok");
}

fn test_basic_import2() {
    print("test_basic_import2... ");

    let a = 2;
    let b = 3;

    let d1 = Other1::double(a);
    let d2 = Other1::double(b);

    let s1 = Other1::sum(d1, d2);

    assert(s1 == 10);

    let s2  = Other1::double(3);

    assert(s2 == 6);

    println("ok");
}

fn test_basic_import1() {
    print("test_basic_import... ");
    let x = 1;
    let y = 2;
    let s = Other1::sum(x, y);
    assert(s == x+y);
    assert(Other1::sum(3, 4) == 7);

    println("ok");
}

fn test_list_append_intrinsic3() {
    print("test_list_append_intrinsic3... ");

    let lst = [];

    foreach i in 0..3 {
        lst.append(i);
    }

    let t = 0;

    foreach i in 0..3 {
        assert(lst.nth(i) == t);
        t = t+1;
    }

    println("ok");
}

fn test_list_append_intrinsic2() {
    print("test_list_append_intrinsic2... ");

    let lst = [1,2,3];
    lst.append(4, "foobar", [5,6,7]);

    let t = 1;

    for i in 0 to len(lst)-2 {
        assert(lst.nth(i) == t);
        t = t+1;
    }

    assert(lst.nth(4) == "foobar");
    assert(lst.nth(5) == [5,6,7]);

    println("ok");
}

fn test_list_append_intrinsic1() {
    print("test_list_append_intrinsic1... ");

    let lst = [1,2,3,4];
    lst.append(5);
    lst.append(6,7);
    lst.append(8,9);

    let t = 1;

    for i in 0 to len(lst) {
        assert(lst.nth(i) == t);
        t = t+1;
    }

    println("ok");
}

fn test_len_intrinsic2() {
    print("test_len_intrinsic2... ");

    let lst = [[1,2,3],[4,5,6],[7,8,9]];
    let t = 1;
    for i in 0 to len(lst) {
        for j in 0 to len(lst.nth(i)) {
            assert(lst.nth(i).nth(j) == t);
            t = t+1;
        }
    }

    println("ok");
}

fn test_len_intrinsic1() {
    print("test_len_intrinsic1... ");

    let lst = [1,2,3,4,5];
    for i in 0 to len(lst) {
        assert(lst.nth(i) == i+1);
    }

    println("ok");
}

fn test_function_chaining() {
    let lst = [[1,2,3],[4,5,6],[7,8,9]];

    let tmp = 1;

    for i in 0 to 3 {
        for j in 0 to 3 {
            assert(lst.nth(i).nth(j) == tmp);
            tmp = tmp+1;
        }
    }
}

fn test_nested_lists() {
    print("test_function_chaining... ");

    let lst = [[1,2,3],[4,5,6],[7,8,9]];

    let tmp = 1;

    foreach i in 0..3 {
        foreach j in 0..3 {
            let l = lst.nth(i);
            assert(l.nth(j) == tmp);
            tmp = tmp+1;
        }
    }

    println("ok");
}

fn test_accessor_bug() {
    print("test_accessor_bug... ");

    let lst = [1,2,3,4,5];

    let x = 1 + lst.nth(1);
    assert(x == 3);

    let y = lst.nth(1) + 1;
    assert(y == 3);

    println("ok");
}

fn test_list_access() {
    print("test_list_access... ");

    let lst = [1,2,3,4,5];

    foreach i in 0..5 {
        assert(i+1 == lst.nth(i));
    }

    println("ok");
}

fn test_while_loop() {
    print("test_while_loop... ");

    let i = 0;
    let tmp = 0;

    while i < 10 {
        assert(tmp == i);
        tmp = tmp+1;
        i = i+1;
    }

    println("ok");
}

fn test_for_loop2() {
    print("test_for_loop2... ");

    let start = 0;
    let end = 10;

    let tmp = -1;
    foreach i in start..end+10 {
        assert(tmp == i-1);
        tmp = tmp+1;
    }

    tmp = -1;
    for i in start to end+10 {
        assert(tmp == i-1);
        tmp = tmp+1;
    }

    println("ok");
}

fn test_for_loop() {
    print("test_for_loop... ");

    let tmp = 0-1;
    foreach i in 0..100 {
        assert(tmp == i-1);
        tmp = tmp+1;
    }

    println("ok");
}

@world
fn test_world_attr() {
    print("test_world_attr... ");
    assert(__world_var_int == 99);
    assert(__world_var_str == "world");
    assert(__world_var_lst == [1,2,3,4,5]);
    assert(__world_var_lst[2] == 3);
    println("ok");
}

fn test_variable_mutation() {
    print("test_variable_mutation... ");

    let x = 1;
    let y = x;
    y = y + 1;

    assert(x == 1, y == 2);

    println("ok");
}

fn test_variable_instantiation() {
    print("test_variable_instantiation... ");

    let x = 9;
    let y = x;
    let z = y + 10;

    assert(x == 9, y == 9, z == 19);

    println("ok");
}

fn main() {
    test_variable_instantiation();
    test_variable_mutation();
    test_world_attr();
    test_for_loop();
    test_for_loop2();
    test_while_loop();
    test_list_access();
    test_accessor_bug();
    test_nested_lists();
    test_function_chaining();
    test_len_intrinsic1();
    test_len_intrinsic2();
    test_list_append_intrinsic1();
    test_list_append_intrinsic2();
    test_list_append_intrinsic3();
    test_basic_import1();
    test_basic_import2();
    test_member_intrinsic_pop1();
    test_list_access1();
    test_list_access2();
    test_reference1();
    test_reference2();
    test_func_reference1();
    test_func_reference2();
    test_point_class_import();
    test_booleans();
    test_strs1();
    test_strs2();
    test_chars1();
    # test_member_intrinsic_split();
    # test_file_io_read_and_remove_lines_member_intrinsic();
    # test_substr_member_intrinsic1();
    test_none_values1();
    test_none_values2();
    test_mutating_option_values();
    test_closure1();
    test_closure2();
    test_closure3();
    test_closure4();
    test_closure5();
    test_match1();
    test_nested_func1();
    test_tuple1();

    # TestStd::test_std();
}

let __world_var_int = 99;
let __world_var_str = "world";
let __world_var_lst = [1,2,3,4,5];

main();
