fn test_list_append_intrinsic3() {
    print("test_list_append_intrinsic3...");

    let lst = [];

    for i in 0..3 {
        lst.append(i);
    }

    let t = 0;

    for i in 0..3 {
        assert(lst.nth(i) == t);
        t = t+1;
    }

    print("ok");
}

fn test_list_append_intrinsic2() {
    print("test_list_append_intrinsic2...");

    let lst = [1,2,3];
    lst.append(4, "foobar", [5,6,7]);

    let t = 1;

    for i in 0..len(lst)-2 {
        assert(lst.nth(i) == t);
        t = t+1;
    }

    assert(lst.nth(4) == "foobar");
    assert(lst.nth(5) == [5,6,7]);

    print("ok");
}

fn test_list_append_intrinsic1() {
    print("test_list_append_intrinsic1...");

    let lst = [1,2,3,4];
    lst.append(5);
    lst.append(6,7);
    lst.append(8,9);

    let t = 1;

    for i in 0..len(lst) {
        assert(lst.nth(i) == t);
        t = t+1;
    }

    print("ok");
}

fn test_list_rev_intrinsic2() {
    print("test_list_rev_intrinsic2...");

    let lst = [[3,2,1],[6,5,4],[9,8,7]];
    let t = 9;

    lst.rev();

    for i in 0..len(lst) {
        for j in 0..len(lst.nth(i)) {
            assert(lst.nth(i).nth(j) == t);
            t = t-1;
        }
    }

    print("ok");
}

fn test_list_rev_intrinsic1() {
    print("test_list_rev_intrinsic1...");

    let lst = [1,2,3,4,5];
    let tmp = 5;

    lst.rev();

    for i in 0..len(lst) {
        assert(lst.nth(i) == tmp);
        tmp = tmp-1;
    }

    print("ok");
}

fn test_len_intrinsic2() {
    print("test_len_intrinsic2...");

    let lst = [[1,2,3],[4,5,6],[7,8,9]];
    let t = 1;
    for i in 0..len(lst) {
        for j in 0..len(lst.nth(i)) {
            assert(lst.nth(i).nth(j) == t);
            t = t+1;
        }
    }

    print("ok");
}

fn test_len_intrinsic1() {
    print("test_len_intrinsic1...");

    let lst = [1,2,3,4,5];
    for i in 0..len(lst) {
        assert(lst.nth(i) == i+1);
    }

    print("ok");
}

fn test_function_chaining() {
    let lst = [[1,2,3],[4,5,6],[7,8,9]];

    let tmp = 1;

    for i in 0..3 {
        for j in 0..3 {
            assert(lst.nth(i).nth(j) == tmp);
            tmp = tmp+1;
        }
    }
}

fn test_nested_lists() {
    print("test_function_chaining...");

    let lst = [[1,2,3],[4,5,6],[7,8,9]];

    let tmp = 1;

    for i in 0..3 {
        for j in 0..3 {
            let l = lst.nth(i);
            assert(l.nth(j) == tmp);
            tmp = tmp+1;
        }
    }

    print("ok");
}

fn test_accessor_bug() {
    print("test_accessor_bug...");

    let lst = [1,2,3,4,5];

    let x = 1 + lst.nth(1);
    assert(x == 3);

    let y = lst.nth(1) + 1;
    assert(y == 3);

    print("ok");
}

fn test_list_access() {
    print("test_list_access...");

    let lst = [1,2,3,4,5];

    for i in 0..5 {
        assert(i+1 == lst.nth(i));
    }

    print("ok");
}

fn test_while_loop() {
    print("test_while_loop...");

    let i = 0;
    let tmp = 0;

    while i < 10 {
        assert(tmp == i);
        tmp = tmp+1;
        i = i+1;
    }

    print("ok");
}

fn test_for_loop2() {
    print("test_for_loop2...");

    let start = 0;
    let end = 10;

    let tmp = 0-1;
    for i in start..end+10 {
        assert(tmp == i-1);
        tmp = tmp+1;
    }

    print("ok");
}

fn test_for_loop() {
    print("test_for_loop...");

    let tmp = 0-1;
    for i in 0..100 {
        assert(tmp == i-1);
        tmp = tmp+1;
    }

    print("ok");
}

fn test_variable_mutation() {
    print("test_variable_mutation...");

    let x = 1;
    let y = x;
    y = y + 1;

    assert(x == 1, y == 2);

    print("ok");
}

fn test_variable_instantiation() {
    print("test_variable_instantiation...");

    let x = 9;
    let y = x;
    let z = y + 10;

    assert(x == 9, y == 9, z == 19);

    print("ok");
}

test_variable_instantiation();
test_variable_mutation();
test_for_loop();
test_for_loop2();
test_while_loop();
test_list_access();
test_accessor_bug();
test_nested_lists();
test_function_chaining();
test_len_intrinsic1();
test_len_intrinsic2();
test_list_rev_intrinsic1();
test_list_rev_intrinsic2();
test_list_append_intrinsic1();
test_list_append_intrinsic2();
test_list_append_intrinsic3();
