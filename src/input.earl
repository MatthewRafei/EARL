module Main

import "std/io.earl"
import "std/char.earl"

enum Status {
    Pending = "Pending",
    InterviewRequested = "InterviewRequested",
    Accepted = "Accepted",
    Declined = "Declined",
}

enum Interest {
    NotInterested = "NotInterested",
    Interested = "Interested",
    VeryInterested = "VeryInterested",
}

class Entry [
    # title, company, pay,
    # desc, status ] {
    title, company, pay,
    desc, status, interest,
    link, extra, date] {

    @pub let job_title = title;
    @pub let company = company;
    @pub let pay = pay;
    @pub let desc = desc;
    @pub let status = status;
    @pub let interest = interest;
    @pub let link = link;
    @pub let extra_info = extra;
    @pub let date = date;

    # @pub fn to_string() {
    #     let s = "\"" + this.job_title + "\", \"" + this.company + "\", \"" + this.pay + "\", \"" + this.desc + "\", \"" + this.status + "\", \"" + this.interest + "\", \"" + this.link + "\", \"" + this.extra_info + "\", \"" + this.date + "\"";
    #     return s;
    # }

    # @pub fn show() {
    #     println("  Job Title: ", this.job_title);
    #     println("  Company: ", this.company);
    #     println("  Pay: ", this.pay);
    #     println("  Description: ", this.desc);
    #     println("  Status: ", this.status);
    #     println("  Interest: ", this.interest);
    #     println("  Link: ", this.link);
    #     println("  Extra Information: ", this.extra_info);
    #     println("  Date: ", this.date);
    # }
}

fn parse_csv(src) {
    if len(src) == 0 {
        return [];
    }

    fn preprocess(@ref src) {
        fn remove_extra_newlines(@ref src) {
            while len(src) > 0 && src.back() == '\n' {
                src.pop(len(src)-1);
            }
        }

        fn remove_extra_whitespace(@ref src) {
            let i, inquote = (0, false);
            while i < len(src) {
                if src[i] == ' ' && !inquote {
                    while src[i] == ' ' {
                        src.pop(i);
                    }
                }
                if src[i] == '"' {
                    inquote = !inquote;
                    i += 1;
                }
                else {
                    i += 1;
                }
            }
        }

        remove_extra_newlines(src);
        remove_extra_whitespace(src);
    }

    fn consume_while(lst, pred) {
        let i = 0;
        let res = "";
        while i < len(lst) && pred(lst[i]) {
            res += lst[i];
            i += 1;
        }
        return (res, i);
    }

    preprocess(src);

    let lst, res, buf, s = ([], [], [], "");
    src.foreach(|c| { lst.append(c); });

    for i in 0 to len(lst)-1 {
        let c = lst[i];
        if c == ',' {
            buf.append(s);
            s = "";
        }
        else if c == '\n' {
            buf.append(s);
            res.append(buf);
            buf = [];
            s = "";
        }
        else if c == '"' {
            let lx, dx = consume_while(lst[i+1:], |c| {
                return c != '"';
            });
            s += lx;
            i += dx+1;
        }
        else {
            let lx, dx = consume_while(lst[i:], |c| {
                return c != ',' && c != '\n';
            });
            s += lx;
            i += dx-1;
        }
    }

    buf.append(s);
    res.append(buf);
    return res;
}

fn new_entry() {
    fn get_interest_from_user() {
        unimplemented();
    }

    fn get_status_from_user() {
        unimplemented();
    }

    let status = get_status_from_user();
    let interest = get_interest_from_user();

    return Entry(title, company, pay, desc, status, interest, link, extra, date);
}

fn repl() {
    new_entry();
}

class T [x, y, z] {
    let x = x;
    let y = y;
    let z = z;
}

@world fn main() {
    let g_entries, g_last_saved_entries = ([], none);
    let g_jt_info_variable, g_jt_info_file = ("JT_INFO_FILE", "/home/zdh/.jt_info.csv");

    let content = IO::file_to_str(g_jt_info_file);
    let csv = parse_csv(content);

    for i in 0 to len(csv) {
        let row = csv[i];
        let title, company, pay, desc, status, interest, link, extra, date
            = (row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8]);
        g_entries.append(Entry(title, company, pay, desc, status, interest, link, extra, date));
        # g_entries.append(Entry("title", "company", "pay", "desc", "status", "interest", "link", "extra", "date"));
    }

    repl();
}

main();

