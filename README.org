#+TITLE: EARL
#+DESCRIPTION: Introduction to EARL.
#+AUTHOR: Zachary Haskins (malloc-nbytes)
#+EMAIL: zdhdev@yahoo.com

# Theme from: https://github.com/fniessen/org-html-themes
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

# Nicer webpage, but less organized
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

*NOTE*: Do not modify the README.html as it is auto generated from README.org by [[https://orgmode.org/][Emacs Org Mode]].

*NOTE*: Open =README.html= in a browser to view this document in a much better format.

*NOTE*: To see current functionality, see the *EARL Syntax* portion of this document
or take a look at =EARL/src/test/earl-tests/main.earl=.

[[./imgs/earl-logo-resized.jpg]]

* Introduction

#+begin_quote
EARL (Evaluate And Run Language) is being designed to be functionally similar to Python, except with types
and brackets.
#+end_quote

* Compiling

EARL uses [[https://www.gnu.org/software/autoconf/][autoconf]] to generate Makefiles. The following are required to build the project:
1. =autoconf=
2. =automake=
3. =libtool=
4. =doxygen= (for EARL source code documentation) (optional)
5. =valgrind= (for building =vtest=) (optional)

Users compiling for the first time should do

#+begin_src bash
  cd EARL/src/
  autoreconf --install --verbose
  ./configure
#+end_src

This will create the Makefiles. Use =make <opt>= where =<opt>= is one of,

#+begin_quote
- =make= \rightarrow builds the project
- =make test= \rightarrow build the project and runs tests
- =make vtest= \rightarrow build the project and run tests with =valgrind= (*Valgrind is required*)
- =make docs= \rightarrow generate the documentation (*[[https://doxygen.nl/][Doxygen]] is required*)
- =make all= \rightarrow do all except clean
- =make clean= \rightarrow cleans the project
- =make install= \rightarrow install EARL as well as the standard library
- =make update-earl= \rightarrow update the current =git= repository, recompile, and reinstall
#+end_quote

Now that the initial setup has been complete, you no longer have to use =autoreconf= and =configure=.

*NOTE:* Using the =-j= flag breaks =make all=. To use the =-j= flag, run =make -j$(nproc)= or =make test -j$(nproc)=
then do =make docs= if wanted.

* Install
As stated before, use the following to install/update EARL.

#+begin_src bash
  cd EARL/src
  make all
  make install
#+end_src

or to update:

#+begin_src bash
  cd EARL/src
  make update-earl
#+end_src

* Editors

Currently in =EARL/src/editors= there exists a file =earl.el=. This provides basic syntax
highlighting and indenting for [[https://www.gnu.org/software/emacs/][Emacs]] (although comment highlighting is borked). To use this file,
simply open it in Emacs and do: =M-x eval-buffer <RET>=. Either kill any /EARL/ buffers that are open or
do =M-x earl-mode <RET>= in the /EARL/ file and you will have the syntax highlighting. If you want this to
be permanent, put the contents of =src/editors/emacs.el= into your init file =~/.emacs.d/init.el=.

* Contributing

** Style Guide

*** Functions

- Functions should be formatted as such:

#+begin_example
<return type> <name>(<params>) {
  body...
}
#+end_example

- All indents should be 4 spaces and do not use tabs.
- Macros should be in CAPS. The only exception is for when you want to treat a macro as a function.
- Always put a comment after =#endif= with what it is ending.

*** Structs

#+begin_example
struct <NameOfStruct> {
  ...
}
#+end_example

- All struct names must use pascal case =<NameOfStruct>=.

*** Misc

- All =if=, =for=, =while= etc. should have brackets (the left bracket should be on the same line as the statement).
  While not required, if a conditional/loop only has one statement, you can ommit the brackets. Just make sure it
  is on a different line.
- =+=, =-=, =*=, =/=, etc. does not need whitespace, but == should.
- Lines have a soft limit of 85 characters.
- =typedef='d types should have =_t= appended to it.
  Example:

#+begin_example
typedef int my_type_t;
#+end_example

- All variable, function, and macro names should be =snake_case=.
- All file names have a hyphen ('-') to separate words.
- *Remove unnecessary trailing whitespace*.
- *Disable auto-formatters* (unless it conforms with the C default style of BSD).

* Test Suite

*Note:* Because we have moved to C++, we have removed all tests for the relavent
data structures that were made for this project as they are no longer needed due
to C++ stdlib.

At the time of writing this, the tests directory is structured as such:

#+begin_example
.
├── Makefile (generated)
├── Makefile.am (how to make the tests)
├── Makefile.in (generated)
├── pair (pair tests)
│   ├── test-pair.c (pair tests implementation)
│   └── test-pair.h (pair tests prototypes)
├── parsers (parsers tests)
│   ├── test-parsers.c (parsers tests implementation)
│   └── test-parsers.h (parsers tests prototypes)
├── sample-input (sample input for tests that require input)
│   ├── expect.1.in
│   ├── expect.2.in
│   ├── expect-keyword.1.in
│   └── expect-type.1.in
├── test-suite.c (the test driver)
├── test-suite.h (contains testing tools)
└── vec (vector tests)
    ├── test-vec.c (vector tests implementation)
    └── test-vec.h (vector tests prototypes)
#+end_example

** Test Suite Source

The test suite is composed of two files, =test-suite.cpp= and =test-suite.hpp=

The file =test-suite.hpp= contains a bunch of custom assert macros that return
the correct values on failure. Use these when comparing values, checking for
null, etc.

The file =test-suite.cpp= is the file where you actually issue running the tests.
This is done with the =#define RUN_TEST(func)= macro where =func= is the test
that you want to run.

All tests return a type of =test_errno_t=, and are all expected to return that.
Additionally, the tests should not take any parameters. At the end of every test,
the function should return =TEST_OK=.

The project is compiled with =-I$(top_srcdir)/include= so there's no need to
have =#include "../../include/"= when needing headers.

If a test were to fail after running =make test=, it will output "FAILED ($n$)"
where $n$ is some test assert failure number. To figure out what the number means,
go into =test/test-suite.hpp= and match it to the appropriate =TEST_ASSERT_*_FAILURE= macro.

** Adding more Tests to Ones that Exist

Simply go into the test directory that you want to add tests for and create a new
function. Then add it's prototype to its corrosponding header file.

Lets say I want to add a new test to =vec=. I would go into
=test/vec/test-vec.hpp= and add a new prototype

#+begin_src c
  #ifndef VEC_TEST_H
  #define VEC_TEST_H

  #include "test-suite.h"

  test_errno_t test_vector_instantiation(void);
  test_errno_t test_vector_insert_elems(void);
  .
  .
  .
  test_errno_t test_vector_my_new_test(void); // here
#+end_src

I would then go into =test/vec/test-vec.cpp= and add it's implementation

#+begin_src c
  test_errno_t test_vector_my_new_test(void) {
    struct vec v = vec_create2(int);
    ...
    TEST_ASSERT_EQ(vec_deref_at(v, 1, int), 99); // example of a test assert.
    ...
    vector_free(&v); // don't forget to free the memory!
    return TEST_OK;
  }
#+end_src

Finally, go into =test/test-suite.cpp= and issue the macro to actually
run the newly created test.

#+begin_src c
  int main(void) {
    TEST_SUITE({
        RUN_TEST_GROUP("vector", {
            RUN_TEST(test_vector_instantiation());
            RUN_TEST(test_vector_insert_elems());
            RUN_TEST(test_vector_large_elements());
            ...
            ...
            ...
            RUN_TEST(test_vector_my_new_test()); // here
            ...
            ...
            ...
        });
    });
  }

#+end_src

That's it! Now run =make test= to see the output.

** Creating New Tests not Associated with Ones that Exist

*UPDATE*: There is now a script =test/create-test.sh= that automates
the following steps for you. However I suggest reading the following
to see what it is doing or in case it fails for whatever reason (there have been issues on MacOS).

This is more involved and will likely change in the future. But for now, here
is how to do it:

*NOTE*: The following steps are being performed in =EARL/src=.

*NOTE*: The following code snippets are "copy-and-paste-able."

*NOTE*: Anywhere that says /testname/, it is refering to the type of test group that you are creating.

1. In =test/=, create a new directory for the type of tests you want
   to create. Let */testname/* be the directory name.
2. Go into =test/Makefile.am= *note the =.am=.
3. In =test_suite_SOURCES=, add =testname/test-testname.cpp=
4. Create the /testname/ directory and add the =.cpp= and =.hpp= files.
   #+begin_src shell
     mkdir test/testname
     touch test/testname/test-testname{.cpp,.hpp}
   #+end_src

5. Add include guards to the header
   #+begin_src shell
     cat > test/testname/test-testname.hpp << "EOF"
     #ifndef TESTNAME_H
     #define TESTNAME_H

     #include "test-suite.hpp"

     #endif // TESTNAME_H
     EOF
   #+end_src

6. Add the appropriate headers to =test/testname/test-testname.cpp=
   #+begin_src shell
     echo "#include \"test-suite.hpp\"" > test/testname/test-testname.cpp
   #+end_src

7. In =test/test-suite.cpp= add the appropriate include header.
8. Start adding your tests (see [[Adding more Tests to Ones that Exist][Adding more Tests to Ones that Exist]])

* Documentation

EARL uses [[https://doxygen.nl/][Doxygen]] to auto generate documentation for the source code of EARL.

All header files should have doxygen comments explaining what is necessary. Do not put
any in =.cpp= files (unless there is no related header for it).

Please read the [[https://www.doxygen.nl/manual/][Doxygen documentation]] (or at least what is relevant) before documenting the code. At the very least,
refer to other files and follow the current way Doxygen comments are written.

If new directories are created and the files need documentation,
edit =EARL/src/Doxyfile= under the =Configuration options related to the input files=,
the =INPUT= switch by adding the directory(s) and file(s) that are needed.

To see the documentation, run =make docs= or =make all= and either
1. open =EARL/docs/html/index.html= in a browser
2. click the link in [[Autogenerated Docs][Autogenerated Docs]]

** Autogenerated Docs

Click the below link to view the autogenerated documentation after =make docs= has been ran.

[[./docs/html/index.html][EARL Development Documentation]]

* EARL Syntax

*NOTE:* Everything in this section is what is currently implemented in EARL.

The syntax to EARL is as follows:

** Variable Creation

#+begin_example
let x = 1;
let a = x;
let b = x + a;
let s = "hello world";
#+end_example

** Mutation

#+begin_example
let a = 1;
a = 2 * 3;
a = x + y + z;
#+end_example

** Function Definitions

#+begin_example
fn func1() {
    print("hello world");
}

fn func2(a) {
    print(a);
}

fn func3(a, s) {
    print("s: ", s);
    return a * 2;
}
#+end_example

** Conditionals

#+begin_example
let x = 3;

if x == 1 {
    print("x is one");
}
else if x == 2 {
    print("x is two");
}
else {
    print("x is something else");
}
#+end_example

** While Loops

#+begin_example
let i = 0;

while i < 10 {
    print("i: ", i);
    i = i + 1;
}
#+end_example

** For loops

#+begin_example
for i in 0..10 {
    print("i: ", i);
}

let end = 10;
for i in 0..end {
    print("i: ", i);
}
#+end_example

** Intrinsic Object Methods

#+begin_example
let lst = [];

for i in 0..3 {
    lst.append(i);
}

lst.append([3,4,5], "hello world");

for i in 0..len(lst)-2 {
    assert(lst.nth(i) == i);
}

assert(lst.nth(3).nth(0) == 3);
assert(lst.nth(3) == [3,4,5]);
assert(lst.nth(4) == "hello world");
#+end_example

** FizzBuzz

#+begin_example
fn fizzbuzz(start, end) {
    for i in start..end {
        if i % 5 == 0 && i % 3 == 0 {
            print("FizzBuzz");
        }
        else if i % 5 == 0 {
            print("Fizz");
        }
        else if i % 3 == 0 {
            print("Buzz");
        }
        else {
            print(i);
        }
    }
}

fizzbuzz(1, 101);
#+end_example

** Collatz Conjecture

#+begin_example
fn collatz(n) {
    while n != 1 {
        if n % 2 == 0 {
            n = n / 2;
        }
        else {
            n = n * 3 + 1;
        }
        print(n);
    }
}

collatz(69420);
#+end_example

** Matrix Multiplication

#+begin_example
fn matrix_mult() {
    let mat1 = [
        [1,2,3],
        [4,5,6],
        [7,8,9]
    ];

    let mat2 = [
        [10,11,12],
        [13,14,15],
        [16,17,18]
    ];

    let result = [[0,0,0],[0,0,0],[0,0,0]];

    for i in 0..3 {
        for j in 0..3 {
            for k in 0..3 {
                result.nth(i).nth(j) = result.nth(i).nth(j) + mat1.nth(i).nth(k) * mat2.nth(k).nth(j);
            }
        }
    }

    for i in 0..3 {
        print(result.nth(i));
    }
}
#+end_example

** Function Attributes

Attributes are flags for functions to enable them to have more features.

*** @world

The =@world= attribute allows the function to see variables
declared in the global scope.

#+begin_example
@world
fn sum() {
    return a + b;
}

let a = 1;
let b = 2;

print(sum());
#+end_example

* EARL Language Reference

[[./EARL-language-reference.html][Click here for the EARL Language Reference]]

